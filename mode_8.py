#################################################################################
##     _________    ____  ________  _______ __  _____    __ __ __________  __
##    / ____/   |  / __ \/_  __/ / / / ___// / / /   |  / //_// ____/ __ \/ /
##   / __/ / /| | / /_/ / / / / /_/ /\__ \/ /_/ / /| | / ,<  / __/ / /_/ / / 
##  / /___/ ___ |/ _, _/ / / / __  /___/ / __  / ___ |/ /| |/ /___/ _, _/_/  
## /_____/_/  |_/_/ |_| /_/ /_/ /_//____/_/ /_/_/  |_/_/ |_/_____/_/ |_(_)   
##     ___    ______________________  _____ __  ______  ________ __
##    /   |  / ____/_  __/ ____/ __ \/ ___// / / / __ \/ ____/ //_/
##   / /| | / /_    / / / __/ / /_/ /\__ \/ /_/ / / / / /   / ,<   
##  / ___ |/ __/   / / / /___/ _, _/___/ / __  / /_/ / /___/ /| |  
## /_/  |_/_/     /_/ /_____/_/ |_|/____/_/ /_/\____/\____/_/ |_|                     
##                                                     
## A P-ROC Project by Scott Danesi, Copyright 2013-2014
## Built on the PyProcGame Framework from Adam Preble and Gerry Stellenberg
#################################################################################

#################################################################################
##     __  _______  ____  ______   ____     ____  ____  _   ____  _______
##    /  |/  / __ \/ __ \/ ____/  ( __ )   / __ )/ __ \/ | / / / / / ___/
##   / /|_/ / / / / / / / __/    / __  |  / __  / / / /  |/ / / / /\__ \ 
##  / /  / / /_/ / /_/ / /___   / /_/ /  / /_/ / /_/ / /|  / /_/ /___/ / 
## /_/  /_/\____/_____/_____/   \____/  /_____/\____/_/ |_/\____//____/  
## 
#################################################################################

import procgame
from procgame import *
import locale
import logging

class Mode8(game.Mode):
	"""docstring for Bonus"""
	def __init__(self, game, priority):
			super(Mode8, self).__init__(game, priority)
			
	def mode_started(self):
		self.game.utilities.set_player_stats('mode8_status',1)
		self.game.bonusmultiplier_mode.incrementBonusMultiplier()
		self.game.shelter_mode.refreshPlayerInfo()
		self.game.update_lamps()
		self.game.modes.remove(self)

	def mode_stopped(self):
		pass